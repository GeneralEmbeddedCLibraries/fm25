// Copyright (c) 2022 Ziga Miklosic
// All Rights Reserved
// This software is under MIT licence (https://opensource.org/licenses/MIT)
////////////////////////////////////////////////////////////////////////////////
/**
*@file      fm25_if.c
*@brief     Application interface for FM25 FRAM device
*@author    Ziga Miklosic
*@date      02.08.2022
*@version	V1.0.0
*/
////////////////////////////////////////////////////////////////////////////////
/**
*@addtogroup FM25_IF
* @{ <!-- BEGIN GROUP -->
*
*
* 	Put code that is platform depended inside code block start with
* 	"USER_CODE_BEGIN" and with end of "USER_CODE_END".
*
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

#include "fm25_if.h"

// USER INCLUDES BEGIN...

#include "drivers/peripheral/spi/spi.h"

// USER INCLUDES END...

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Variables
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Function Prototypes
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/**
*		Initialize low level interface
*
* @note	User shall provide definition of that function based on used platform!
*
* @return 		status - Status of initialization
*/
////////////////////////////////////////////////////////////////////////////////
fm25_status_t fm25_if_init(void)
{
	fm25_status_t status = eFM25_OK;

	// USER CODE BEGIN...

	if ( eSPI_OK != spi_init())
	{
		status = eFM25_ERROR_INIT;
	}

	// USER CODE END...

	return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*       De-Initialize low level interface
*
* @note User shall provide definition of that function based on used platform!
*
* @return       status - Status of initialization
*/
////////////////////////////////////////////////////////////////////////////////
fm25_status_t fm25_if_deinit(void)
{
    fm25_status_t status = eFM25_OK;

    // USER CODE BEGIN...

    // No actions...

    // USER CODE END...

    return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Write bytes via SPI to device
*
* @note	User shall provide definition of that function based on used platform!
*
* @param[in] 	p_data		- Pointer to transmit data
* @param[in] 	size		- Size of transmit data
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
fm25_status_t fm25_if_transmit(const uint8_t * p_data, const uint32_t size, const spi_cs_action_t cs_action)
{
	fm25_status_t status = eFM25_OK;

	// USER CODE BEGIN...

	if ( eSPI_OK != spi_4_transmit( eSPI4_CH_FRAM, (uint8_t*) p_data, size, cs_action ))
	{
		status = eFM25_ERROR_SPI;
	}

	// USER CODE END...

	return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Read bytes via SPI from device
*
* @note	User shall provide definition of that function based on used platform!
*
* @param[in] 	p_data		- Pointer to receive data
* @param[in] 	size		- Size of received data
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
fm25_status_t fm25_if_receive(uint8_t * p_data, const uint32_t size, const spi_cs_action_t cs_action)
{
	fm25_status_t status = eFM25_OK;

	// USER CODE BEGIN...

	if ( eSPI_OK != spi_4_receive( eSPI4_CH_FRAM, p_data, size, cs_action ))
	{
		status = eFM25_ERROR_SPI;
	}

	// USER CODE END...

	return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////
